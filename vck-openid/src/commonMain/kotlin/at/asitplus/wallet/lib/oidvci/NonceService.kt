package at.asitplus.wallet.lib.oidvci

import com.benasher44.uuid.uuid4
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock

/**
 * Provides generation, storage and validation of challenges used throughout the code, e.g. as challenges for
 * presentation of credentials.
 * Can be implemented to provide replication across different instances of the enclosing application.
 */
// TODO Rename "nonce" to "challenge" in next major release
interface NonceService {

    /**
     * Implementers: Generate a new random string, store it for later verification
     */
    suspend fun provideNonce(): String

    /**
     * Implementers: Verify if the string has been generated by this instance
     */
    suspend fun verifyNonce(it: String): Boolean

    /**
     * Implementers: Verify if the value has been generated by this instance, remove it from the list of valid values
     */
    suspend fun verifyAndRemoveNonce(it: String): Boolean

}

/**
 * Holds valid random values in memory, protected with a [Mutex],
 * to ensure a basic form of thread-safety.
 */
class DefaultNonceService : NonceService {

    // TODO Remove values after a certain timeout
    private val mutex = Mutex()
    private val values = mutableListOf<String>()

    override suspend fun provideNonce() = uuid4().toString().also { mutex.withLock { values += it } }

    override suspend fun verifyNonce(it: String) = values.contains(it)

    override suspend fun verifyAndRemoveNonce(it: String) = mutex.withLock { values.remove(it) }
}